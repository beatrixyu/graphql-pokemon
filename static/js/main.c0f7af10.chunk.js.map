{"version":3,"sources":["Graphql/getGraphql.js","Components/pokemon.js","PokemonContainer/pokemonContainer.js","App.js","serviceWorker.js","index.js"],"names":["GET_POKEMONS","gql","Pokemon","pokemon","name","src","image","height","minimum","attacks","special","map","attack","type","damage","PokemonContainer","useQuery","variables","first","data","pokemons","className","key","id","App","client","ApolloClient","uri","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gpBAGO,IAAMA,E,MAAeC,GAAH,K,MCAlB,SAASC,EAAT,GAA+B,IAAZC,EAAW,EAAXA,QACtB,OACI,6BACI,4BAAKA,EAAQC,MACb,yBAAKC,IAAKF,EAAQG,QAClB,4BAAKH,EAAQI,OAAOC,SACpB,6BACKL,EAAQM,QAAQC,QACZC,KAAI,SAAAC,GAAM,OACP,6BACI,uCAAaA,EAAOR,MACpB,uCAAaQ,EAAOC,MACpB,yCAAeD,EAAOE,cCTnC,SAASC,IAAoB,IAAD,EAEEC,YAAShB,EAAc,CAC5DiB,UAAW,CAAEC,MAAO,MADhBC,KAF+B,gBAEL,GAFK,GAEvBC,gBAFuB,MAEZ,GAFY,EAMvC,OACI,yBAAKC,UAAU,oBAEPD,GAAYA,EAAST,KAAI,SAAAR,GAAO,OAAI,kBAACD,EAAD,CAASoB,IAAKnB,EAAQoB,GAAIpB,QAASA,Q,MCJxE,SAASqB,IAEtB,IAAMC,EAAS,IAAIC,IAAa,CAC9BC,IAAK,yCAEP,OACE,kBAAC,IAAD,CAAgBF,OAAQA,GACtB,8BACE,kBAACV,EAAD,QCPYa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c0f7af10.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\n//use prettier to make the query better and fetch the url from https://graphql-pokemon.now.sh/\nexport const GET_POKEMONS = gql`\n    query pokemons($first: Int!) {\n        pokemons(first: $first) {\n                id\n    name\n    image\n    height {\n      minimum\n      maximum\n    }\n    weight {\n      minimum\n      maximum\n    }\n    attacks {\n      special {\n        name\n        damage\n      }\n    }\n\n\n        }   \n    }\n`;","import React from \"react\"\nimport { mockComponent } from \"react-dom/test-utils\"\n\nexport function Pokemon({ pokemon }) {\n    return (\n        <div>\n            <h2>{pokemon.name}</h2>\n            <img src={pokemon.image}></img>\n            <h5>{pokemon.height.minimum}</h5>\n            <div>\n                {pokemon.attacks.special\n                    .map(attack =>\n                        <div>\n                            <span>Name: {attack.name}</span>\n                            <span>Type: {attack.type}</span>\n                            <span>Damage: {attack.damage}</span>\n\n                        </div>\n                    )}\n            </div>\n        </div>\n    )\n}\n\n\n","import React from \"react\"\nimport { useQuery } from \"@apollo/react-hooks\"\n\nimport { GET_POKEMONS } from '../Graphql/getGraphql';\nimport { Pokemon } from \"../Components/pokemon\"\n\nexport default function PokemonContainer() {\n\n    const { data: { pokemons = [] } = {} } = useQuery(GET_POKEMONS, {\n        variables: { first: 10 },\n    });\n\n    return (\n        <div className=\"pokemonContainer\">\n            {\n                pokemons && pokemons.map(pokemon => <Pokemon key={pokemon.id} pokemon={pokemon} />)\n            }\n        </div>\n    )\n}\n\n\n\n\n\n\n","import React from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from \"@apollo/react-hooks\"\n\nimport PokemonContainer from \"./PokemonContainer/pokemonContainer\"\n\nimport './App.css';\n\n\n// the Apollo cache is set up automatically\n\nexport default function App() {\n\n  const client = new ApolloClient({\n    uri: 'https://graphql-pokemon2.vercel.app/',\n  });\n  return (\n    <ApolloProvider client={client}>\n      <main>\n        <PokemonContainer />\n      </main>\n    </ApolloProvider>\n  );\n}\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}